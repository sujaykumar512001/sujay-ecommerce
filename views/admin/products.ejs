<!DOCTYPE html>
<!-- Admin Products Management -->
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">
            <i class="fas fa-box me-2"></i>Product Management
        </h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
                <i class="fas fa-plus me-2"></i>Add New Product
            </button>
        </div>
    </div>

    <!-- Analytics Cards -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="admin-stats-card">
                <div class="row align-items-center">
                    <div class="col">
                        <div class="stat-number" id="totalProductsCount"><%= totalProducts || 0 %></div>
                        <div class="stat-label">Total Products</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-box stat-icon"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="admin-stats-card">
                <div class="row align-items-center">
                    <div class="col">
                        <div class="stat-number" id="totalViewsCount"><%= totalViews || 0 %></div>
                        <div class="stat-label">Total Views</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-eye stat-icon"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="admin-stats-card">
                <div class="row align-items-center">
                    <div class="col">
                        <div class="stat-number" id="totalSalesCount"><%= totalSales || 0 %></div>
                        <div class="stat-label">Total Sales</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-clipboard-list stat-icon"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="admin-stats-card">
                <div class="row align-items-center">
                    <div class="col">
                        <div class="stat-number" id="avgRatingCount"><%= avgRating || 0 %></div>
                        <div class="stat-label">Avg Rating</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-star stat-icon"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="admin-card mb-4">
        <div class="admin-card-header">
            <h6 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-filter me-2"></i>Search & Filters
            </h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <input type="text" id="productSearch" class="form-control" placeholder="Search products by name, category, or brand...">
                </div>
                <div class="col-md-4">
                    <select id="categoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        <option value="Men">Men</option>
                        <option value="Women">Women</option>
                        <option value="Kids">Kids</option>
                        <option value="Paintings">Paintings</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Products Table -->
    <div class="admin-card">
        <div class="admin-card-header d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-list me-2"></i>Products List
            </h6>
            <div class="btn-group">
                <button class="btn btn-sm btn-outline-danger" id="bulkDelete">
                    <i class="fas fa-trash me-1"></i>Bulk Delete
                </button>
                <button class="btn btn-sm btn-outline-success" id="exportProducts">
                    <i class="fas fa-download me-1"></i>Export
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" id="selectAll">
                            </th>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Brand</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Rating</th>
                            <th>Views</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody">
                        <tr>
                            <td colspan="11" class="text-center py-4">
                                <div class="text-muted">
                                    <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                                    <p>Loading products...</p>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus me-2"></i>Add New Product
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addProductForm">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Product Name *</label>
                                <input type="text" class="form-control" name="name" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Category *</label>
                                <select class="form-select" name="category" required>
                                    <option value="">Select Category</option>
                                    <option value="Men">Men</option>
                                    <option value="Women">Women</option>
                                    <option value="Kids">Kids</option>
                                    <option value="Paintings">Paintings</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Brand *</label>
                                <input type="text" class="form-control" name="brand" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Price (â‚¹) *</label>
                                <input type="number" class="form-control" name="price" step="0.01" required>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Stock</label>
                                <input type="number" class="form-control" name="stock" value="10">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Rating</label>
                                <input type="number" class="form-control" name="rating" step="0.1" min="0" max="5" value="0">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Image URL</label>
                        <input type="url" class="form-control" name="image" placeholder="https://example.com/image.jpg">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description *</label>
                        <textarea class="form-control" name="description" rows="3" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Add Product
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Product Modal -->
<div class="modal fade" id="editProductModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit me-2"></i>Edit Product
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editProductForm">
                <div class="modal-body">
                    <input type="hidden" id="editProductId" name="productId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Product Name *</label>
                                <input type="text" class="form-control" id="editProductName" name="name" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Category *</label>
                                <select class="form-select" id="editProductCategory" name="category" required>
                                    <option value="">Select Category</option>
                                    <option value="Men">Men</option>
                                    <option value="Women">Women</option>
                                    <option value="Kids">Kids</option>
                                    <option value="Paintings">Paintings</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Brand *</label>
                                <input type="text" class="form-control" id="editProductBrand" name="brand" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Price (â‚¹) *</label>
                                <input type="number" class="form-control" id="editProductPrice" name="price" step="0.01" required>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Stock</label>
                                <input type="number" class="form-control" id="editProductStock" name="stock">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Rating</label>
                                <input type="number" class="form-control" id="editProductRating" name="rating" step="0.1" min="0" max="5">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Image URL</label>
                        <input type="url" class="form-control" id="editProductImage" name="image">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description *</label>
                        <textarea class="form-control" id="editProductDescription" name="description" rows="3" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Update Product
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this product? This action cannot be undone.</p>
                <input type="hidden" id="deleteProductId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">
                    <i class="fas fa-trash me-2"></i>Delete Product
                </button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize variables
    let products = [];
    let filteredProducts = [];

    // Load products on page load
    loadProducts();

    // Search functionality
    document.getElementById('productSearch').addEventListener('input', function() {
        filterProducts();
    });

    // Category filter
    document.getElementById('categoryFilter').addEventListener('change', function() {
        filterProducts();
    });

    // Select all functionality
    document.getElementById('selectAll').addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.product-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
    });

    // Add product form submission
    document.getElementById('addProductForm').addEventListener('submit', function(e) {
        e.preventDefault();
        addProduct();
    });

    // Edit product form submission
    document.getElementById('editProductForm').addEventListener('submit', function(e) {
        e.preventDefault();
        updateProduct();
    });

    // Delete confirmation
    document.getElementById('confirmDelete').addEventListener('click', function() {
        const productId = document.getElementById('deleteProductId').value;
        deleteProduct(productId);
    });

    // Bulk delete
    document.getElementById('bulkDelete').addEventListener('click', function() {
        const selectedProducts = document.querySelectorAll('.product-checkbox:checked');
        if (selectedProducts.length === 0) {
            showAlert('Please select products to delete', 'warning');
            return;
        }
        
        if (confirm(`Are you sure you want to delete ${selectedProducts.length} products?`)) {
            const productIds = Array.from(selectedProducts).map(cb => cb.value);
            bulkDeleteProducts(productIds);
        }
    });

    // Export products
    document.getElementById('exportProducts').addEventListener('click', function() {
        exportProducts();
    });

    // Event delegation for dynamic elements
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('edit-product')) {
            const productId = e.target.getAttribute('data-product-id');
            editProduct(productId);
        }
        
        if (e.target.classList.contains('delete-product')) {
            const productId = e.target.getAttribute('data-product-id');
            showDeleteModal(productId);
        }
        
        if (e.target.classList.contains('view-product')) {
            const productId = e.target.getAttribute('data-product-id');
            viewProduct(productId);
        }
    });

    // Functions
    function loadProducts() {
        fetch('/admin/api/products')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    products = data.products;
                    filteredProducts = [...products];
                    renderProducts();
                    updateAnalytics();
                    console.log('Products loaded successfully:', products.length);
                } else {
                    showAlert('Failed to load products: ' + (data.message || 'Unknown error'), 'error');
                }
            })
            .catch(error => {
                console.error('Error loading products:', error);
                showAlert('Error loading products: ' + error.message, 'error');
            });
    }

    function filterProducts() {
        const searchTerm = document.getElementById('productSearch').value.toLowerCase();
        const categoryFilter = document.getElementById('categoryFilter').value;

        filteredProducts = products.filter(product => {
            const matchesSearch = product.name.toLowerCase().includes(searchTerm) ||
                                product.category.toLowerCase().includes(searchTerm) ||
                                product.brand.toLowerCase().includes(searchTerm);
            const matchesCategory = !categoryFilter || product.category === categoryFilter;
            
            return matchesSearch && matchesCategory;
        });

        renderProducts();
    }

    function renderProducts() {
        const tbody = document.getElementById('productsTableBody');
        
        if (filteredProducts.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="11" class="text-center py-4">
                        <div class="text-muted">
                            <i class="fas fa-search fa-2x mb-3"></i>
                            <h5>No Products Found</h5>
                            <p>Try adjusting your search or filters</p>
                        </div>
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = filteredProducts.map(product => `
            <tr data-product-id="${product._id}">
                <td>
                    <input type="checkbox" class="product-checkbox" value="${product._id}">
                </td>
                <td>
                    <img src="${product.image || product.images?.[0]?.url || 'https://via.placeholder.com/50x50'}" 
                         alt="${product.name}" class="img-fluid" style="width: 50px; height: 50px; object-fit: cover;">
                </td>
                <td>
                    <div>
                        <h6 class="mb-0">${product.name}</h6>
                        <small class="text-muted">ID: ${product._id}</small>
                    </div>
                </td>
                <td>
                    <span class="badge bg-primary">${product.category}</span>
                </td>
                <td>${product.brand}</td>
                <td>
                    <div>
                        <span class="fw-bold">â‚¹${product.price}</span>
                        ${product.originalPrice && product.originalPrice > product.price ? 
                            `<br><small class="text-muted text-decoration-line-through">â‚¹${product.originalPrice}</small>` : ''}
                    </div>
                </td>
                <td>
                    <span class="badge bg-success">${product.stock || 'In Stock'}</span>
                </td>
                <td>
                    <div>
                        <div class="text-warning">
                            ${generateStars(product.rating || 0)}
                        </div>
                        <small>(${product.rating || 0})</small>
                    </div>
                </td>
                <td>${product.views || product.viewCount || 0}</td>
                <td>
                    <span class="badge bg-success">Active</span>
                </td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-primary edit-product" data-product-id="${product._id}" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-outline-info view-product" data-product-id="${product._id}" title="View">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-outline-danger delete-product" data-product-id="${product._id}" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    }

    function generateStars(rating) {
        let stars = '';
        for (let i = 0; i < 5; i++) {
            if (i < rating) {
                stars += '<i class="fas fa-star"></i>';
            } else {
                stars += '<i class="far fa-star"></i>';
            }
        }
        return stars;
    }

    function addProduct() {
        const formData = new FormData(document.getElementById('addProductForm'));
        const productData = Object.fromEntries(formData.entries());

        // Convert price and stock to numbers
        productData.price = parseFloat(productData.price);
        productData.stock = parseInt(productData.stock) || 10;
        productData.rating = parseFloat(productData.rating) || 0;

        // Handle image field properly
        if (productData.image) {
            productData.images = [{ url: productData.image, isPrimary: true }];
        } else {
            productData.images = [{ url: 'https://via.placeholder.com/300x300', isPrimary: true }];
        }
        delete productData.image; // Remove the old image field

        fetch('/admin/api/products', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(productData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('Product added successfully!', 'success');
                document.getElementById('addProductForm').reset();
                bootstrap.Modal.getInstance(document.getElementById('addProductModal')).hide();
                loadProducts(); // Reload products to show the new one
            } else {
                showAlert(data.message || 'Failed to add product', 'error');
            }
        })
        .catch(error => {
            console.error('Error adding product:', error);
            showAlert('Error adding product', 'error');
        });
    }

    function editProduct(productId) {
        const product = products.find(p => p._id === productId);
        if (!product) return;

        // Populate edit form
        document.getElementById('editProductId').value = product._id;
        document.getElementById('editProductName').value = product.name;
        document.getElementById('editProductCategory').value = product.category;
        document.getElementById('editProductBrand').value = product.brand;
        document.getElementById('editProductPrice').value = product.price;
        document.getElementById('editProductStock').value = product.stock || '';
        document.getElementById('editProductImage').value = product.image || product.images?.[0]?.url || '';
        document.getElementById('editProductRating').value = product.rating || 0;
        document.getElementById('editProductDescription').value = product.description;

        // Show modal
        new bootstrap.Modal(document.getElementById('editProductModal')).show();
    }

    function updateProduct() {
        const formData = new FormData(document.getElementById('editProductForm'));
        const productData = Object.fromEntries(formData.entries());
        const productId = productData.productId;

        // Convert price and stock to numbers
        productData.price = parseFloat(productData.price);
        productData.stock = parseInt(productData.stock) || 10;
        productData.rating = parseFloat(productData.rating) || 0;

        // Handle image field properly
        if (productData.image) {
            productData.images = [{ url: productData.image, isPrimary: true }];
        }
        delete productData.image; // Remove the old image field

        fetch(`/admin/api/products/${productId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(productData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('Product updated successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('editProductModal')).hide();
                loadProducts();
            } else {
                showAlert(data.message || 'Failed to update product', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating product:', error);
            showAlert('Error updating product', 'error');
        });
    }

    function showDeleteModal(productId) {
        document.getElementById('deleteProductId').value = productId;
        new bootstrap.Modal(document.getElementById('deleteModal')).show();
    }

    function deleteProduct(productId) {
        console.log('Deleting product:', productId);
        
        fetch(`/admin/api/products/${productId}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showAlert('Product deleted successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
                loadProducts();
                console.log('Product deleted successfully');
            } else {
                showAlert(data.message || 'Failed to delete product', 'error');
            }
        })
        .catch(error => {
            console.error('Error deleting product:', error);
            showAlert('Error deleting product: ' + error.message, 'error');
        });
    }

    function bulkDeleteProducts(productIds) {
        fetch('/admin/api/products/bulk-delete', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productIds })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert(`${productIds.length} products deleted successfully!`, 'success');
                loadProducts();
            } else {
                showAlert(data.message || 'Failed to delete products', 'error');
            }
        })
        .catch(error => {
            console.error('Error bulk deleting products:', error);
            showAlert('Error deleting products', 'error');
        });
    }

    function exportProducts() {
        const csvContent = generateCSV();
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'products.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }

    function generateCSV() {
        const headers = ['Name', 'Category', 'Brand', 'Price', 'Stock', 'Rating', 'Description'];
        const csvRows = [headers.join(',')];
        
        products.forEach(product => {
            const row = [
                `"${product.name}"`,
                `"${product.category}"`,
                `"${product.brand}"`,
                product.price,
                product.stock || 0,
                product.rating || 0,
                `"${product.description}"`
            ];
            csvRows.push(row.join(','));
        });
        
        return csvRows.join('\n');
    }

    function updateAnalytics() {
        document.getElementById('totalProductsCount').textContent = products.length;
        const totalViews = products.reduce((sum, product) => sum + (product.views || product.viewCount || 0), 0);
        const totalSales = products.reduce((sum, product) => sum + (product.totalSales || 0), 0);
        const avgRating = products.length > 0 ? 
            (products.reduce((sum, product) => sum + (product.rating || 0), 0) / products.length).toFixed(1) : 0;
        
        document.getElementById('totalViewsCount').textContent = totalViews;
        document.getElementById('totalSalesCount').textContent = totalSales;
        document.getElementById('avgRatingCount').textContent = avgRating;
    }

    function viewProduct(productId) {
        // Open product details in admin view
        window.open(`/admin/products/${productId}`, '_blank');
    }

    function showAlert(message, type) {
        // Create alert element
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        // Insert at the top of the page
        const container = document.querySelector('.container-fluid');
        container.insertBefore(alertDiv, container.firstChild);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }
});
</script> 